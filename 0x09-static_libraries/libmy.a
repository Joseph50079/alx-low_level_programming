!<arch>
0-isupper.c/    0           0     0     644     262       `
#include "main.h"

/**
 * _isupper - function prototype
 * @c: return 1 for uppercase else 0
 * description - return 1 if c is upper
 * Return: 0 or 1 if otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		{
		return (1);
		}
	else
		return (0);
}
0-memset.c/     0           0     0     644     322       `
#include <stdio.h>
#include "main.h"

/**
 * *_memset - sets char to a memory
 * @s: source / memory
 * @b: char
 * @n: determines how many space to be taken in the memory
 * Return: return s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		s[i] = b;
	}

	return (s);
}
0-strcat.c/     0           0     0     644     359       `
#include "main.h"
#include <stdio.h>
/**
 * _strcat - function concatinate
 * @dest: dest main string
 * @src: last string
 * Return: return dest
 */
char *_strcat(char *dest, char *src)
{
	int i = 0, n;

	while (*(dest + i) != '\0')
		i++;

	for (n = 0; *(src + n) != '\0'; n++, i++)
	{

		*(dest + i) = *(src + n);
	}
		dest[i] = '\0';


	return (dest);

}

100-atoi.c/     0           0     0     644     368       `
#include "main.h"

/**
 * _atoi - converts a string to an int
 * @s: the string to be changed
 *
 * Return: the converted int
 */

int _atoi(char *s)
{
	int sign = 1;
	unsigned int num = 0;

	do {
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = num * 10 + (*s - '0');
		else if (num > 0)
			break;
	} while (*s++);

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     222       `
#include "main.h"
/**
 * _isdigit - function
 * @c: return 1 if it's a digit
 * description - 1 if it is a digit
 * Return: 0
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	{
		return (1);
	}
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     350       `
#include <stdio.h>
#include "main.h"


/**
 * *_memcpy - copies src to the dest memory determined by n
 * @dest: destination
 * @src: source
 * @n: number of source to be copied
 * Return: return dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i = 0;

	while (i < n)
	{
	dest[i] = src[i];
	i++;
	}



	return (dest);
}
1-strncat.c/    0           0     0     644     439       `
#include "main.h"
#include <stdio.h>


/**
 * *_strncat - function concatenate with int num
 * @dest: oringin string
 * @src: src string
 * @n: integer for src
 * description - concatenate with n byte
 * Return: return dest
 */

char *_strncat(char *dest, char *src, int n)
{
	int i, j;

	for (i = 0; dest[i] != '\0'; i++)
		;

	for (j = 0; src[j] != '\0' && j < n; i++, j++)
	{
		dest[i] = src[j];
	}

	dest[i] = '\0';

	return (dest);
}

2-strchr.c/     0           0     0     644     237       `
#include <stdio.h>
#include "main.h"

/**
 * *_strchr - function
 * @s: string
 * @c: accepted char
 * Return: s
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
	if (*s == c)
	{
		return (s);
	}

	s++;
	}

	return (NULL);
}

2-strlen.c/     0           0     0     644     226       `
#include "main.h"
#include <stdio.h>

/**
 * _strlen - function returns length of string
 * @s: parameter
 * Return: returns i value in int
 */

int _strlen(char *s)
{
	int i = 0;

	while (s[i] != '\0')
	i++;
	return (i);


}
2-strncpy.c/    0           0     0     644     426       `
#include <stdio.h>
#include "main.h"
/**
 * *_strncpy - function
 * @dest: destination parameter
 * @src: source string
 * @n: integer that determine how many sourece file string can be input to destination
 */
char *_strncpy(char *dest, char *src, int n)
{
   int i = 0;
   
   while (src[i] != '\0')
   {
      if (i < n )
     {
       dest[i] = src[i];
     }
     i++;
   }
   
   dest[i] = '\0';
   
   return (dest);
}
3-islower.c/    0           0     0     644     261       `
#include "main.h"

/**
 * _islower - function to check for lowercase character
 * @c:  is the int that will use for the argument of the function
 * Return: 0
 */

int _islower(int c)
{

	if (c >= 'a' && c <= 'z')

	{

		return (1);

	}

	else

		return (0);

}

3-puts.c/       0           0     0     644     212       `
#include "main.h"

/**
 * _puts - function prints a string and a new line
 * @str: parameter
 */

void _puts(char *str)
{
	int c;

	c = 0;

	while (str[c] != '\0')
	{
	putchar(str[c]);
	c++;
	}
	putchar('\n');
}
3-strcmp.c/     0           0     0     644     188       `
#include "main.h"

/**
 * *_strcmp - function to compare two string
 * @s1: first string
 * @s2: second string
 * Return: result
 */

int _strcmp(char *s1, char *s2)
{
	return (result);
}
3-strspn.c/     0           0     0     644     821       `
#include <stdio.h>

/**
  * _strlen - get the length of a string
  * @s: pointer
  *
  * Return: the length of a string
  */
unsigned int _strlen(char *s)
{
	unsigned int len = 0;

	while (s[len] != '\0')
	{
		len++;
	}

	return (len);
}


/**
  * _strspn - gets the length of a prefix substring.
  * @s: pointer
  * @accept: poniter
  * Return: length of matched characters
  */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int count = 0;
	unsigned int s_len = _strlen(s);
	unsigned int accept_len = _strlen(accept);

	unsigned int i;
	unsigned int j;
	unsigned int match;

	for (i = 0; i < s_len; i++)
	{
		match = 0;

		for (j = 0; j < accept_len; j++)
		{
			if (accept[j] == s[i])
			{
				match = 1;
				break;
			}
		}

		if (!match)
		{
			break;
		}
		else
		{
			count++;
		}
	}

	return (count);
}

4-isalpha.c/    0           0     0     644     303       `
#include "main.h"

/**
 * _isalpha - function to check if c is a letter, lowercase or uppercase
 * @c: is the int that will use for the argument of the function
 * Return: 0
 */

int _isalpha(int c)
{

	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))

	{

	return (1);

	}

	else

	return (0);

}

4-strpbrk.c/    0           0     0     644     435       `
#include <stdio.h>

#include "main.h"

/**
  * _strpbrk - searches a string for any of a set of bytes
  * @s: pointer
  * @accept: pointer
  *
  * Return: the address of the first occurrence character in the string
  */
char *_strpbrk(char *s, char *accept)
{
	int i;
	int j;

	for (i = 0; *s != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (*s == accept[j])
			{
				return (s);
			}
		}
		s++;
	}

	return (NULL);
}

5-strstr.c/     0           0     0     644     349       `
#include <stdio.h>
#include "main.h"

/**
 * *_strstr - function get the link of a prefixed substring
 * @haystack: string
 * @needle: substring
 * Return: a pointer to haystack
 */

char *_strstr(char *haystack, char *needle)
{
	while (*haystack != '\0')
	{
		if (*haystack == *needle)
	{
		return (haystack);
	}
		haystack++;
	}
	return (NULL);
}

6-abs.c/        0           0     0     644     285       `
#include "main.h"

#include <stdio.h>

/**
 * _abs - function that computes the absolute value of an integer
 * @c:  is the int that will use for the argument of the function
 * Return: 0
 */

int _abs(int c)
{

	if (c > 0 || c == 0)

	{

	return (c);

	}

	else

	return (c * -1);

}

9-strcpy.c/     0           0     0     644     291       `
#include "main.h"

/**
* _strcpy - Copy paste string
* @dest: destination
* @src: source
*
* Return: destination
*/

char *_strcpy(char *dest, char *src)
{
	int inc = 0;

	while (*(src + inc) != '\0')
	{
		*(dest + inc) = *(src + inc);
		inc++;
	}
	*(dest + inc) = '\0';


	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

